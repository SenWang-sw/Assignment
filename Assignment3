1. Describe the problem generics address.
    we dont need to write separate implementations of codes for each data type. 
    This can reduce a lot of redundant codes
2. How would you create a list of strings, using the generic List class?
    List<string>list = new List<string>();
3. How many generic type parameters does the Dictionary class have?
    two -> TKey and TValue
4. True/False. When a generic class has multiple type parameters, they must all match.
    false
5. What method is used to add items to a List object?
    Add()
6. Name two methods that cause items to be removed from a List.
    Remove(value), RemoveAt(index)
7. How do you indicate that a class has a generic type parameter?
    add "<T>" after the class name
8. True/False. Generic classes can only have one generic type parameter.
    false
9. True/False. Generic type constraints limit what can be used for the generic type.
    true
10. True/False. Constraints let you use the methods of the thing you are constraining to.
    true

Practice working with Generics
1. Create a custom Stack class MyStack<T> that can be used with any data type which
has following methods
    public class MyStack<T>
    {
        private List<T> list = new List<T>();
        public int Count()
        {     
            return list.Count;      
        }
        public T Pop()
        {
            T element = list[list.Count - 1];
            list.RemoveAt(list.Count - 1);
            return element;
        }
        public void Push(T element)
        {
            list.Add(element);
        }
    }
2. Create a Generic List data structure MyList<T> that can store any data type.
Implement the following methods.
    public class MyList<T>
    {
        private List<T> list = new List<T>();
        public void Add(T element)
        {
            list.Add(element);
        }
        public T Remove(int index)
        {
            T element = list[index];
            list.RemoveAt(index);
            return element;
        }
        public bool Contains(T element)
        {
            foreach(var item in list)
            {
                if(item.Equals(element)) return true;
            }
            return false;
        }
        public void Clear()
        {
            for(int i = 0; i < list.Count; i++)
            {
                list.RemoveAt(i);
            }
        }
        public void insert(T element, int index) 
        {  
            list.Insert(index, element);
        }
        public void DeleteAt(int index)
        {
            list.RemoveAt(index);
        }
        public T Find(int index)
        {
            return list[index];
        }

    }
    
3. Implement a GenericRepository<T> class that implements IRepository<T> interface
that will have common /CRUD/ operations so that it can work with any data source
such as SQL Server, Oracle, In-Memory Data etc. Make sure you have a type constraint
on T were it should be of reference type and can be of type Entity which has one
property called Id. IRepository<T> should have following methods
1. void Add(T item)
2. void Remove(T item)
3. Void Save()
4. IEnumerable<T> GetAll()
5. T GetById(int id)
